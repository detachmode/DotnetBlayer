#pragma checksum "/Users/dennismuller/DotnetBlayer/Blayer.Shared/Components/Editor.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f1960aaec82420d087025b46f826a6d6eab3ebf6"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blayer.Shared.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using System.IO;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using DotnetBlayer;
    using Blazaco;
    using Blazaco.Editor;
    using Blazaco.Editor.Options;
    using Blayer.Shared.Components;
    using Microsoft.CodeAnalysis.CSharp.Scripting;
    using Microsoft.CodeAnalysis.Scripting;
    using Microsoft.CodeAnalysis;
    using Blayer.Shared;
    public class Editor : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 6 "/Users/dennismuller/DotnetBlayer/Blayer.Shared/Components/Editor.razor"
 

    public class EditorAction
    {
        public Action OnAction { get; set; }
        public EditorAction(Action onAction)
        {
            OnAction = onAction;
        }

        public string Name { get; set; }

        [JSInvokable]
        public void Execute() => OnAction();
    }

    private EditorModel _editorModel { get; set; }
    private MonacoEditor _editor;

    protected override async Task OnInitAsync()
    {
var options = new EditorOptions()
{
    Value = "// Your Code Here!",
    Language = "csharp",
    Theme = "vs-dark"
};

_editorModel = new EditorModel(options);

        await base.OnAfterRenderAsync();
    }

    public async Task ChangeTheme(UIChangeEventArgs e)
    {
        Console.WriteLine($"setting theme to: {e.Value.ToString()}");
        await _editor.SetTheme(e.Value.ToString());
    }

    public async Task SetValue(string value)
    {
        await _editor.SetValue(value);
    }

    public async Task<string> GetValue()
    {
        var val = await _editor.GetValue();
        return val;
    }
    public async Task Layout()
    {
        await JSRuntime.InvokeAsync<bool>("Blazaco.Editor.Layout", new[] { _editorModel.Id });
    }

        public async Task ShowErrors(IEnumerable<Diagnostic> errors)
        {
            // var code = await Editor.GetValue();
            // var errors = await Interactive.GetErrors(code);
            // await Editor.ResetDecorations();
            foreach (var e in errors)
            {
                var sL = e.Location.GetLineSpan().StartLinePosition.Line;
                var sC = e.Location.GetLineSpan().StartLinePosition.Character;
                var eL = e.Location.GetLineSpan().EndLinePosition.Line;
                var eC = e.Location.GetLineSpan().EndLinePosition.Character;
                // Print($"{sL}, {sC} - {eL}, {eC} - {e.GetMessage()}");
                await AddInlineDecoration(sL + 1, sC + 1, eL + 1, eC + 1, "redSquiggly");
            }
     
        }





    public async Task AddInlineDecoration(int startLine, int startChar, int endLine, int endChar, string cssClass)
    {
       
        await JSRuntime.InvokeAsync<bool>("Blazaco.Editor.AddInlineDecoration",
             new object[] { _editorModel.Id , startLine, startChar, endLine, endChar, cssClass });
    }
    public async Task ResetDecorations()
    {  
        await JSRuntime.InvokeAsync<bool>("Blazaco.Editor.ResetDecorations",
             new [] { _editorModel.Id  });
    }

    public async Task<string> GetSelectedText()
    {
        return await JSRuntime.InvokeAsync<string>("Blazaco.Editor.GetSelectedText", new[] { _editorModel.Id });
    }
    
    public async Task<string> GetCurrentLineText()
    {
        return await JSRuntime.InvokeAsync<string>("Blazaco.Editor.GetCurrentLineText", new[] { _editorModel.Id });
    }

    public async Task RegisterAction(string actionId, string actionLabel, Action callback)
    {
        await JSRuntime.InvokeAsync<object>(
            "Blazaco.Editor.RegisterAction", 
            new object[] 
                { 
                    _editorModel.Id, 
                    actionId,
                    actionLabel,
                    new DotNetObjectRef(new EditorAction(callback)) 
                });
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
