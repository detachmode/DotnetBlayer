
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Web;
int seq = 0;

RenderTreeBuilder builder;

T GetVar<T>(string name)
{
    var found = Self.AllVariables.FirstOrDefault(x => x.Name == name);
    return found != null ? (T)found.Value  : default(T);
}





Action tag(string tag, string style = "", string cssclass = "", Action onClick = null, Func<string> content = null, params Action[] inner)
{
    return () =>
    {
     builder.OpenElement(++seq, tag);
     builder.AddAttribute(++seq, "style", style); 
     builder.AddAttribute(++seq, "class", cssclass); 

     if(onClick != null)
     {
           builder.AddAttribute(++seq, "onclick",
                    EventCallback.Factory.Create<MouseEventArgs>(new object(), (e) =>
                    {                
                       onClick();
                       StateHasChanged();                                      
                    }));
     }

     

     if(content != null) builder.AddContent(++seq, content());
     foreach(var a in inner)
        a();
    builder.CloseElement();
    };
}


Action html(string s) => () => builder.AddMarkupContent(++seq, s);
Action button(string s) => tag("button", content : () => s, cssclass : "btn btn-primary" );
Action button(string s, Action onClick) => tag("button", content : () => s, cssclass : "btn btn-primary", onClick : onClick );
Action text(string s) => tag("span", content : () => s);
Action h1(string s) => tag("h1", content : () => s);
Action div(string style = "", params Action[] inner) => tag("div", style: style, inner:inner);

var exp = GetVar<string>("exp") ?? "";
var topDisplayText = GetVar<string>("topDisplayText");
var sum = GetVar<int>("sum");

Action DisplayText()
{
     return  text(topDisplayText);
}

void AddToExpression(string input)
{
    var show = "";
    switch(input)
    {
        case "C" :
            sum = 0;
            exp = "";
            show = "";
            break;
        case "=" :
            sum += int.Parse(exp);
            exp = "";
            show = sum.ToString();     
            break;
        case "+" :
            sum += int.Parse(exp);
            exp = "";
            show = sum.ToString();     
            break;
        default: 
            exp += input;
            show = exp;
            break;

    }
 
    Print(show);
    topDisplayText = show;
}

Action Button(string number) 
{
    return button(number,  () => AddToExpression(number)); 

}




Show(b => {
    builder = b;
    seq = 0;

 div(
     style : "",
        h1("Calculator"),
        text( " Result is : " + topDisplayText),
  
        div( 
            style : "",
           Button("1"), Button("2"), Button("3")
        ),
        div(
           style : "",
           Button("4"), Button("5"), Button("6")  
        ),
        div(
            style : "",
           Button("7"), Button("8"), Button("9")  
        )  ,
        div(
            style : "",
           Button("+"),  Button("=") , Button("C") 
        )  
    )();

});