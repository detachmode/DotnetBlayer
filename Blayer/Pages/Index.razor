@page "/"

@inject Interactive<Api> Interactive
@inject Api Api


<main >
    <div class="container">
  <div class="row">
    <div class="col-sm">
      <button class="btn btn-success" onchange="@Run" onclick="@Run">Run</button>
      <Editor ref="@Editor"></Editor>
    </div>

    <div class="col-sm">
    
    <input  style="width:100%; visibility:hidden" bind="@Code"/>

    <BlayerToolRenderer Tool="@Tool"></BlayerToolRenderer>

    

    @foreach (var res in Results)
    {
        <p >@res</p>
    }
    </div>
  </div>
</div>



</main>


@functions{


    public IBlayerTool Tool { get; set; }
    public Editor Editor { get; set; }
    public string Code { get; set; }
    public List<string> Results { get; set; }
    public bool InitalLoadDone { get; set; }

    protected override async Task OnAfterRenderAsync()
    {
        if(!InitalLoadDone)
        {
            var code = await new HttpClient().GetStringAsync("https://localhost:5556/examples/example1.txt");
            await Editor.SetValue(code);
            InitalLoadDone =true;
        }
    }

    protected override async Task OnInitAsync()
    {

        Results = new List<string>();
        
        await Interactive.Init();

        Api.Clear = () => {
            this.Invoke(() => {
                Results.Clear();
                StateHasChanged();
            });
        };

        Api.OnBlayerTool = (t) => {
            this.Invoke(() => {
                Tool = t;
                StateHasChanged();
            });
        };

        Api.Print = (txt) => {
            this.Invoke(() =>
            { 
                Results.Add(txt);
                StateHasChanged();

            });
        };

   
        
        
        //MainViewModel.InteractiveOut = (s) => Results.Add(s);
    }


    async Task Run()
    {
        var val = await Editor.GetValue();
        var res = await Interactive.Eval(val);
        Results.Add(res);
        StateHasChanged();
    }

    
}



