@page "/"

@inject Interactive<Api> Interactive
@inject Api Api
@inject IJSRuntime JSRuntime

<div style="height:100vh; width: 100vw;">
<GridLayout Areas="
    'top top'
    'edit ui'
    'cout vars'
    'cin vars'
"
  Rows="30px 1fr 100px 30px"
  Columns="50vw 50vw"
>
<GridArea Area="top">



    <div style="
    text-align: center;
">
    <button onclick="@(() => Editor.Layout())">Layout</button>
    <button 
        onclick="@ToogleFullScreen">
        @(IsFullScreen ? "Close" : "Fullscreen")
        </button>
    <button style="width:200px" class="btn btn-success" onchange="@Run" onclick="@Run">Run</button>
</div>

</GridArea>
<GridArea Area="edit">
     <Editor ref="@Editor"></Editor>
</GridArea>
<GridArea Area="ui" Scrollable="true">

    <BlayerToolRenderer Tool="@Tool"></BlayerToolRenderer>

</GridArea>
<GridArea Area="cout" Scrollable="true">
   
<div style="padding:6px;line-height: 1.0; font-size:0.9rem">


    @foreach (var res in Results)
    {
        var id = res == LastResult ? "lastCout" : "";
        <p id="@id" style="margin: 0px">
@res.Text
        </p>
        
    }
</div>

</GridArea>
<GridArea Area="cin">
        <input  onkeydown="@CinKeyDown"  style="width:100%;" bind-value-oninput="@Code"/>
</GridArea>
<GridArea Area="vars" Scrollable="true">
    @if(AllVariables != null)
    {
        foreach (var v in AllVariables)
        {
            @v.Name <text>:</text> @v.Value
            <br/>
        }
    }
 
</GridArea>


</GridLayout>

</div>





@functions{

    public bool IsFullScreen { get; set; }


    public IBlayerTool Tool { get; set; }
    public Editor Editor { get; set; }
    public string Code { get; set; }
    public List<CoutRes> Results { get; set; }
    public CoutRes LastResult { get; set; }
    public List<ScriptVariable> AllVariables { get; set; }
    public bool InitalLoadDone { get; set; }



    async Task ToogleFullScreen()
    {
        var jsfun = IsFullScreen ? "closeFullscreen" : "openFullscreen";
        IsFullScreen = !IsFullScreen;
        StateHasChanged();
        await JSRuntime.InvokeAsync<bool>(jsfun);
        await Editor.Layout();
        
        
    }

    protected override async Task OnAfterRenderAsync()
    {
        if(!InitalLoadDone)
        {
            var code = await new HttpClient().GetStringAsync("https://localhost:5556/examples/example1.txt");
            await Editor.SetValue(code);
            InitalLoadDone =true;
        }
    }

    async Task CinKeyDown(UIKeyboardEventArgs arg)
    {
        if(arg.Key == "Enter")
        {
            var res = await Interactive.Eval(Code);
            await Print(res);
            AllVariables = Interactive.GetAllVariables();
        }
    }

    protected override async Task OnInitAsync()
    {

        Results = new List<CoutRes>();
        
        await Interactive.Init();

        Api.Clear = () => {
            this.Invoke(() => {
                Results.Clear();
                StateHasChanged();
            });
        };

        Api.SetEditorText = (c) => {
            this.Invoke(() => {
                Editor.SetValue(c);
            });
        };

        Api.GetEditorText = () => {       
            return Editor.GetValue();        
        };

        Api.OnBlayerTool = (t) => {
            this.Invoke(() => {
                Tool = t;
                StateHasChanged();
            });
        };
        Api.StateHasChanged = () => {
            this.Invoke(() => {
                StateHasChanged();
            });
        };

        Api.Print = (txt) => {
            this.InvokeAsync(async () =>
            { 
                await Print(txt);
            });
        };

   
        
        
        //MainViewModel.InteractiveOut = (s) => Results.Add(s);
    }


    public class CoutRes
    {
        public string Text {get; set;}
    }

    


    async Task Run()
    {
        var val = await Editor.GetValue();
        var res = await Interactive.Eval(val);
        await Print(res);

        AllVariables = Interactive.GetAllVariables();
        
    }

    async Task Print(string res)
    {
        var cout = new CoutRes{
            Text = res
        };
        Results.Add(cout);
        LastResult = cout;

        await this.Invoke( () =>
        { 
            StateHasChanged();
        });

        await Task.Delay(10);
    
   
        await JSRuntime.ScrollIntoView("lastCout");
    }

    
}



