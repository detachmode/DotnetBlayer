@page "/"

@inject Interactive<Api> Interactive
@inject Api Api

<div style="height:100vh; width: 100vw;">
<GridLayout Areas="
    'top top'
    'edit ui'
    'cout ui'
    'cin ui'
"
  Rows="30px 1fr 100px 30px"
  Columns="50vw 50vw"
>
<GridArea Area="top">

    <div style="
    text-align: center;
">
    <button style="width:200px" class="btn btn-success" onchange="@Run" onclick="@Run">Run</button>
</div>

</GridArea>
<GridArea Area="edit">
     <Editor ref="@Editor"></Editor>
</GridArea>
<GridArea Area="ui">

    <BlayerToolRenderer Tool="@Tool"></BlayerToolRenderer>

</GridArea>
<GridArea Area="cout">
   

    @foreach (var res in Results)
    {
        <p >@res</p>
    }

</GridArea>
<GridArea Area="cin">
        <input  style="width:100%;" bind="@Code"/>
</GridArea>


</GridLayout>

</div>





@functions{


    public IBlayerTool Tool { get; set; }
    public Editor Editor { get; set; }
    public string Code { get; set; }
    public List<string> Results { get; set; }
    public bool InitalLoadDone { get; set; }

    protected override async Task OnAfterRenderAsync()
    {
        if(!InitalLoadDone)
        {
            var code = await new HttpClient().GetStringAsync("https://localhost:5556/examples/example1.txt");
            await Editor.SetValue(code);
            InitalLoadDone =true;
        }
    }

    protected override async Task OnInitAsync()
    {

        Results = new List<string>();
        
        await Interactive.Init();

        Api.Clear = () => {
            this.Invoke(() => {
                Results.Clear();
                StateHasChanged();
            });
        };

        Api.OnBlayerTool = (t) => {
            this.Invoke(() => {
                Tool = t;
                StateHasChanged();
            });
        };

        Api.Print = (txt) => {
            this.Invoke(() =>
            { 
                Results.Add(txt);
                StateHasChanged();

            });
        };

   
        
        
        //MainViewModel.InteractiveOut = (s) => Results.Add(s);
    }


    async Task Run()
    {
        var val = await Editor.GetValue();
        var res = await Interactive.Eval(val);
        Results.Add(res);
        StateHasChanged();
    }

    
}



